// <auto-generated />
using System;
using HotelApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HotelApp.Migrations
{
    [DbContext(typeof(MvcHotelContext))]
    partial class MvcHotelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("HotelApp.Models.Amenities", b =>
                {
                    b.Property<int>("AmenitiesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AmenitiesName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.HasKey("AmenitiesId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("HotelApp.Models.BookingRoom", b =>
                {
                    b.Property<int>("BookingRoomId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BookingCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CheckInDate");

                    b.Property<DateTime>("CheckOutDate");

                    b.Property<int>("ClientId");

                    b.Property<int>("RoomId");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.HasKey("BookingRoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("BookingRoom");
                });

            modelBuilder.Entity("HotelApp.Models.Currency", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.HasKey("CurrencyId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("HotelApp.Models.Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(255);

                    b.Property<double>("CommissionRate");

                    b.Property<string>("HotelName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.HasKey("HotelId");

                    b.ToTable("Hotel");
                });

            modelBuilder.Entity("HotelApp.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrencyId");

                    b.Property<int>("HotelId");

                    b.Property<int>("MaxOccupancy");

                    b.Property<double>("NetRate");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double>("SellRate");

                    b.HasKey("RoomId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HotelId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("HotelApp.Models.RoomAmenities", b =>
                {
                    b.Property<int>("RoomAmenitiesId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmenitiesId");

                    b.Property<int>("RoomId");

                    b.HasKey("RoomAmenitiesId");

                    b.HasIndex("AmenitiesId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomAmenities");
                });

            modelBuilder.Entity("HotelApp.Models.BookingRoom", b =>
                {
                    b.HasOne("HotelApp.Models.Room", "Room")
                        .WithMany("BookingRooms")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("ForeignKey_BookingRoom_Room")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HotelApp.Models.Room", b =>
                {
                    b.HasOne("HotelApp.Models.Currency", "Currency")
                        .WithMany("Rooms")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("ForeignKey_Room_Currency")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HotelApp.Models.Hotel", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .HasConstraintName("ForeignKey_Room_Hotel")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HotelApp.Models.RoomAmenities", b =>
                {
                    b.HasOne("HotelApp.Models.Amenities", "Amenities")
                        .WithMany("RoomAmenitieses")
                        .HasForeignKey("AmenitiesId")
                        .HasConstraintName("ForeignKey_RoomAmenities_Amenities")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HotelApp.Models.Room", "Room")
                        .WithMany("RoomAmenitieses")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("ForeignKey_RoomAmenities_Room")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
